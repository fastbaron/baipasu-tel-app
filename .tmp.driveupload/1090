from flask import Flask, render_template, request, redirect, url_for
import sqlite3
import pandas as pd
from collections import defaultdict
import os

# import datetime
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl import load_workbook
from datetime import datetime


app = Flask(__name__)


class Client:
    def __init__(self, id, name, course, items):
        self.id = id
        self.name = name
        self.course = course
        self.items = items  # ここを修正


def load_clients_from_file(file_path, file_type="csv"):
    if file_type == "csv":
        df = pd.read_csv(file_path)
    elif file_type == "excel":
        df = pd.read_excel(file_path)
    else:
        raise ValueError("Invalid file type. Use 'csv' or 'excel'.")

    clients = []
    for index, row in df.iterrows():
        items = [
            {"name": row[f"item{i}"]}
            for i in range(1, 7)
            if not pd.isnull(row[f"item{i}"])
        ]
        clients.append(Client(row["id"], row["name"], row["course"], items))

    return clients


clients = load_clients_from_file(
    "clients.xlsx", file_type="excel"
)  # Use "clients.xlsx" and file_type="excel" for Excel file


def get_client(id):
    for client in clients:
        if client.id == id:
            return client
    return None


@app.route("/")
def index():
    return render_template("index.html")


@app.route("/id_submit", methods=["POST"])
def id_submit():
    client_id = request.form.get("client_id")
    if client_id and get_client(int(client_id)):
        return redirect(url_for("client_page", id=client_id))
    else:
        return "Client not found", 404


@app.route("/client/<int:id>", methods=["GET"])
def client_page(id):
    client = get_client(id)
    if client:
        return render_template("client.html", client=client)
    else:
        return "Client not found", 404


@app.route("/submit", methods=["POST"])
def submit_order():
    client_id = request.form["client_id"]
    client_name = request.form["client_name"]
    course = request.form["course"]
    items = {
        key: int(value)
        for key, value in request.form.items()
        if key not in ["client_id", "client_name", "course"]
    }

    order = {
        "client_name": client_name,
        "course": course,
        "items": items,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),  # ここを修正
    }

    save_order_to_excel(order, items)

    return render_template("order_success.html")


def save_order_to_excel(order, order_data):
    current_time = datetime.now()  # ここを修正
    filename = f"orders_{current_time.strftime('%Y%m%d')}.xlsx"
    file_exists = os.path.isfile(filename)

    if not file_exists:
        wb = Workbook()
        ws = wb.active
        ws.title = "Orders"

        # headers = [
        #     "timestamp",
        #     "client_name",
        #     "course",
        #     "item_name",
        #     "quantity",
        # ]
        headers = [
            "コース",
            "相手先",
            "種類",
            "個数",
        ]
        for col_num, header in enumerate(headers, 1):
            col_letter = get_column_letter(col_num)
            ws[f"{col_letter}1"] = header

        wb.save(filename)
    else:
        wb = load_workbook(filename)
        ws = wb.active

    row = [
        # current_time.strftime("%Y-%m-%d %H:%M:%S"),
        current_time.strftime("%m-%d %H:%M"),
        # order["client_id"],
        order["client_name"],
        order["course"],
    ]

    for item, quantity in order["items"].items():
        row_data = row + [item, quantity]
        ws.append([order["course"], order["client_name"], item, order["items"][item]])

    wb.save(filename)


if __name__ == "__main__":
    app.run(debug=True)
